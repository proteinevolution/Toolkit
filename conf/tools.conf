# This file is supposed to provide version information for all executables which are used for job submission
# For own binaries and scripts we follow Semantic Versioning.
# Changing tools in this file will have an effect on the validity of hashes in the jobhashes collection

#Specify memory in GB
#Specify hardruntime in seconds

# A new version indicates that the frontend should reload the configuration
version: "0.0.2"

Tools {

  ali2d {
    name: "ali2d"
    longname: "Ali2D"
    order: 0
    description: "Plots info on secondary structure and transmembrane regions onto an MSA"
    input_placeholder: "Enter a protein multiple sequence alignment with up to 100 sequences in CLUSTAL/FASTA/STOCKHOLM format. Runtime of ~30 mins for N=100 sequences of length L=200; scales as N*L."
    code: "al2d"
    section: "2ary"
    sample_input_key: "msaProtSeq"
    version: ""
    memory: 96
    threads: 8
    hardruntime: 43200
    parameter: ["ALIGNMENT", "INVOKE_PSIPRED"]
    forwarding: {
      alignment: []
      multi_seq: []
    }
    sequence_restrictions: {
      formats: ["CLUSTAL", "FASTA", "STOCKHOLM"]
      max_char_per_seq: 3000
      min_num_seq: 2
      max_num_seq: 100
      same_length: true
    }
  }

  aln2plot {
    name: "aln2plot"
    longname: "Aln2Plot"
    order: 0
    description: "Shows a graphical overview of hydrophobicity and side chain volume"
    input_placeholder: "Enter a protein multiple sequence alignment with up to 2000 sequences in FASTA/CLUSTAL format."
    code: "a2pl"
    section: "SeqAnal"
    sample_input_key: "msaProtSeq"
    version: ""
    memory: 8
    threads: 1
    parameter: ["ALIGNMENT"]
    hardruntime: 600
    forwarding: {
      alignment: []
      multi_seq: []
    }
    sequence_restrictions: {
      formats: ["CLUSTAL", "FASTA", "STOCKHOLM"]
      max_char_per_seq: 1000
      max_num_seq: 2000
      same_length: true
    }
  }

  ancescon {
    name: "ancescon"
    longname: "ANCESCON"
    order: 0
    description: "Reconstructs ancestral protein sequences"
    input_placeholder: "Enter a protein multiple sequence alignment with up to 2000 sequences in CLUSTAL/FASTA/STOCKHOLM format."
    code: "ancn"
    section: "Classification"
    sample_input_key: "msaProtSeq"
    version: ""
    memory: 16
    threads: 1
    hardruntime: 43200
    language: ""
    parameter: ["ALIGNMENT"]
    forwarding: {
      alignment: []
      multi_seq: []
    }
    sequence_restrictions: {
      formats: ["CLUSTAL", "FASTA", "STOCKHOLM"]
      max_char_per_seq: 3000
      min_num_seq: 2
      max_num_seq: 2000
      same_length: true
    }
  }

  sixframe {
    name: "sixframe"
    longname: "6FrameTranslation"
    order: 0
    description: "Six-frame translation of nucleotide sequences"
    input_placeholder: "Enter a DNA sequence in FASTA format."
    code: "6frt"
    section: "Utils"
    sample_input_key: "singleDNASeq"
    version: ""
    memory: 6
    threads: 1
    hardruntime: 1800
    language: ""
    parameter: ["ALIGNMENT", "INC_NUCL", "AMINO_NUCL_REL", "CODON_TABLE"]
    forwarding: {
      alignment: []
      multi_seq: []
    }
    sequence_restrictions: {
      type: "DNA"
      max_num_seq: 1
    }
  }

  backtrans {
    name: "backtrans"
    longname: "BackTranslator"
    order: 1
    description: "Reverse translation of protein sequences into nucleotide sequences"
    input_placeholder: "Enter a protein sequence."
    code: "bact"
    section: "Utils"
    sample_input_key: "singleProtSeq"
    version: ""
    memory: 4
    threads: 1
    hardruntime: 600
    language: ""
    parameter: ["ALIGNMENT", "INC_AMINO", "GENETIC_CODE", "CODON_TABLE_ORGANISM"]
    forwarding: {
      alignment: []
      multi_seq: []
    }
    sequence_restrictions: {
      max_num_seq: 1
    }
  }

  formatseq {
    name: "formatseq"
    longname: "FormatSeq"
    order: 2
    description: "Converts A3M to FASTA"
    input_placeholder: "Enter a multiple sequence alignment in A3M/CLUSTAL/FASTA/STOCKHOLM format."
    code: "fseq"
    section: "Utils"
    sample_input_key: "a3mProtSeq"
    version: ""
    memory: 1
    threads: 1
    hardruntime: 3600
    parameter: ["ALIGNMENT", "IN_FORMAT", "OUT_FORMAT"]
    forwarding: {
      alignment: ["hhblits", "hhfilter", "hhpred", "hhomp", "hhrepid"]
      multi_seq: []
    }
    sequence_restrictions: {
      formats: ["A3M", "CLUSTAL", "FASTA", "STOCKHOLM"]
      same_length: true
    }
  }

  clustalo {
    name: "clustalo"
    longname: "Clustal\u03A9"
    order: 1
    description: "Multiple sequence alignment tool"
    input_placeholder: "Enter up to 4000 protein/nucleotide sequences in FASTA format."
    code: "cluo"
    section: "Alignment"
    sample_input_key: "multiProtSeq"
    version: "1.2.1"
    memory: 32
    threads: 4
    hardruntime: 3600
    language: ""
    parameter: ["ALIGNMENT", "OUTPUT_ORDER"]
    forwarding: {
      alignment: ["ali2d", "aln2plot", "alnviz", "ancescon", "clans", "clustalo", "deepcoil", "kalign", "hhblits", "hhfilter", "hhpred", "hhrepid", "hmmer",
        "hhomp", "mafft", "mmseqs2", "msaprobs", "muscle", "pcoils", "phyml", "psiblast", "reformat", "repper", "seq2id", "tcoffee", "quick2d"]
      multi_seq: []
    }
    sequence_restrictions: {
      formats: ["CLUSTAL", "FASTA", "STOCKHOLM"]
      max_num_seq: 4000
      min_num_seq: 2
    }
  }

  clans {
    name: "clans"
    longname: "CLANS"
    order: 1
    description: "Clustering based on all-against-all BLAST+ similarities"
    input_placeholder: "Enter protein sequences with up to 10000 sequences in FASTA format."
    code: "clan"
    section: "Classification"
    sample_input_key: "multiProtSeq"
    version: ""
    memory: 64
    threads: 8
    hardruntime: 51200
    language: ""
    parameter: ["ALIGNMENT", "MATRIX", "CLANS_EVAL"]
    forwarding: {
      alignment: []
      multi_seq: []
    }
    sequence_restrictions: {
      formats: ["CLUSTAL", "FASTA", "STOCKHOLM"]
      min_num_seq: 2
      max_num_seq: 10000
    }
  }

  deepcoil {
    name: "deepcoil"
    longname: "DeepCoil"
    order: 1
    description: "Prediction of coiled coils"
    input_placeholder: "Enter a protein sequence/multiple sequence alignment with up to 2000 sequences in FASTA/CLUSTAL format.\nExample of a custom MSA input is in the help pages."
    code: "dcoi"
    section: "SeqAnal"
    sample_input_key: "coiledcoilSeq"
    version: "commit 46d0f273dfecd005facbffb3fa500bec70cd5ce3"
    memory: 64
    threads: 8
    hardruntime: 14400
    language: "Python 3.5"
    parameter: ["ALIGNMENT", "PCOILS_INPUT_MODE"]
    forwarding: {
      alignment: []
      multi_seq: []
    }
    sequence_restrictions: {
      formats: ["CLUSTAL", "FASTA", "STOCKHOLM"]
      min_char_per_seq: 30
      max_char_per_seq: 500
      max_num_seq: 2000
      same_length: true
    }
  }

  hmmer {
    name: "hmmer"
    longname: "HMMER"
    order: 2
    description: "Sensitive sequence searching based on profile HMMs"
    input_placeholder: "Enter a protein sequence/multiple sequence alignment in CLUSTAL/FASTA/STOCKHOLM format."
    code: "hmmr"
    section: "Search"
    sample_input_key: "singleProtSeq"
    version: "3.2.1"
    memory: 128
    threads: 8
    hardruntime: 3600
    language: "C"
    parameter: ["ALIGNMENT", "HMMER_DB", "MAX_HHBLITS_ITER", "EVALUE", "DESC"]
    forwarding: {
      alignment: ["ali2d", "aln2plot", "alnviz", "ancescon", "clans", "clustalo", "deepcoil", "kalign", "hhblits", "hhfilter", "hhpred", "hhrepid", "hmmer", "mafft",
        "hhomp", "mmseqs2", "msaprobs", "muscle", "pcoils", "phyml", "psiblast", "reformat", "repper", "seq2id", "tcoffee", "quick2d"]
      multi_seq: ["clans", "mmseqs2"]
    },
    sequence_restrictions: {
      formats: ["CLUSTAL", "FASTA", "STOCKHOLM"]
      same_length: true
    }
  }

  hhblits {
    name: "hhblits"
    longname: "HHblits"
    order: 0
    description: "Remote homology detection method based on iterative HMM-HMM comparison"
    input_placeholder: "Enter a protein sequence/multiple sequence alignment in FASTA/CLUSTAL/A3M format."
    code: "hhbl"
    section: "Search"
    sample_input_key: "singleProtSeq"
    version: "3.2.0"
    memory: 74
    threads: 8
    hardruntime: 3600
    language: ""
    parameter: ["ALIGNMENT", "HHBLITSDB", "HHBLITS_INCL_EVAL", "MAXROUNDS", "PMIN", "DESC"]
    forwarding: {
      alignment: ["clans", "hhblits", "hhpred", "hhrepid", "hhomp"]
      multi_seq: ["clans", "mmseqs2"]
    },
    sequence_restrictions: {
      formats: ["A3M", "CLUSTAL", "FASTA", "STOCKHOLM"]
      same_length: true
    }
  }

  hhfilter {
    name: "hhfilter"
    longname: "HHfilter"
    order: 3
    description: "Extraction of a representative set of sequences from an alignment"
    input_placeholder: "Enter a protein multiple sequence alignment with up to 10000 sequences in A3M/CLUSTAL/FASTA/STOCKHOLM format."
    code: "hhfi"
    section: "Utils"
    sample_input_key: "msaProtSeq"
    version: ""
    memory: 16
    threads: 1
    hardruntime: 3600
    language: ""
    parameter: ["ALIGNMENT", "MAX_SEQID", "MIN_SEQID_QUERY", "MIN_QUERY_COV", "NUM_SEQS_EXTRACT"]
    forwarding: {
      alignment: ["ali2d", "aln2plot", "alnviz", "ancescon", "clans", "clustalo", "deepcoil", "kalign", "hhblits", "hhfilter", "hhpred", "hhrepid", "hmmer", "mafft",
        "hhomp", "mmseqs2", "msaprobs", "muscle", "pcoils", "phyml", "psiblast", "reformat", "repper", "seq2id", "tcoffee", "quick2d"]
      multi_seq: []
    }
    sequence_restrictions: {
      formats: ["A3M", "CLUSTAL", "FASTA", "STOCKHOLM"]
      min_num_seq: 2
      same_length: true
    }
  }

  hhomp {
    name: "hhomp"
    longname: "HHomp"
    order: 1
    description: "Detection of outer membrane proteins by HMM-HMM comparison"
    input_placeholder: "Enter a protein sequence/multiple sequence alignment in A3M/CLUSTAL/FASTA/STOCKHOLM format."
    parameter: ["ALIGNMENT", "HHOMPDB", "MSA_GEN_MAX_ITER", "HHPRED_INCL_EVAL", "MIN_COV", "MIN_SEQID_QUERY", "ALIGNMODE", "PMIN", "DESC"]
    code: "hhom"
    section: "2ary"
    sample_input_key: "ompSeq"
    version: ""
    memory: 96
    threads: 8
    hardruntime: 14400
    language: ""
    forwarding: {
      alignment: []
      multi_seq: []
    }
    sequence_restrictions: {
      formats: ["A3M", "CLUSTAL", "FASTA", "STOCKHOLM"]
      same_length: true
    }
  }


  hhpred {
    name: "hhpred"
    longname: "HHpred"
    order: 1
    description: "Homology detection & structure prediction by HMM-HMM comparison"
    code: "hhpr"
    input_placeholder = "Enter a protein sequence/multiple sequence alignment in A3M/CLUSTAL/FASTA/STOCKHOLM format."
    section: "Search"
    sample_input_key: "singleProtSeq,singleProtSeq2"
    version: "3.2.0"
    memory: 96
    threads: 8
    hardruntime: 14400
    language: "C++"
    parameter: ["TWOTEXTALIGNMENT", "PROTEOMES", "HHSUITEDB", "MSA_GEN_METHOD", "MSA_GEN_MAX_ITER", "HHPRED_INCL_EVAL",
      "MIN_SEQID_QUERY", "MIN_COV", "SS_SCORING", "ALIGNMACMODE", "MACTHRESHOLD", "DESC", "PMIN"]
    forwarding: {
      alignment: ["alnviz", "hhblits", "hhpred", "hhrepid", "hhomp"]
      multi_seq: []
    }
    sequence_restrictions: {
      formats: ["A3M", "CLUSTAL", "FASTA", "STOCKHOLM"]
      same_length: true
    }
  }

  hhpred_manual {
    name: "hhpred_manual"
    longname: "HHpred-TemplateSelection"
    order: 0
    description: ""
    input_placeholder: ""
    code: "htmp"
    section: "forward"
    sample_input_key: "msaProtSeq"
    version: ""
    memory: 16
    threads: 1
    hardruntime: 3600
    language: ""
    parameter: []
    forwarding: {
      alignment: []
      multi_seq: []
    }
    sequence_restrictions: {
    }
  }

  hhrepid {
    name: "hhrepid"
    longname: "HHrepID"
    order: 2
    description: "De novo identification of repeats"
    input_placeholder: "Enter a protein sequence/multiple sequence alignment with up to 2000 sequences in FASTA/CLUSTAL/A3M format."
    code: "hrep"
    section: "SeqAnal"
    sample_input_key: "tprSeq"
    version: ""
    memory: 96
    threads: 8
    parameter: ["ALIGNMENT", "MSA_GEN_MAX_ITER_HHREPID", "SCORE_SS", "REP_PVAL_THRESHOLD", "SELF_ALN_PVAL_THRESHOLD", "MERGE_ITERS", "DOMAIN_BOUND_DETECTION"]
    hardruntime: 3600
    forwarding: {
      alignment: []
      multi_seq: []
    }
    sequence_restrictions: {
      formats: ["A3M", "CLUSTAL", "FASTA", "STOCKHOLM"]
      same_length: true
    }
  }

  kalign {
    name: "kalign"
    longname: "Kalign"
    order: 2
    description: "Multiple sequence alignment tool"
    input_placeholder: "Enter up to 4000 protein/nucleotide sequences in FASTA format."
    code: "kaln"
    section: "Alignment"
    sample_input_key: "multiProtSeq"
    version: "2.04"
    memory: 32
    threads: 1
    hardruntime: 3600
    language: ""
    parameter: ["ALIGNMENT", "OUTPUT_ORDER", "GAP_OPEN", "GAP_EXT_KALN", "GAP_TERM", "BONUSSCORE"]
    forwarding: {
      alignment: ["ali2d", "aln2plot", "alnviz", "ancescon", "clans", "clustalo", "deepcoil", "kalign", "hhblits", "hhfilter", "hhpred", "hhrepid", "hmmer", "mafft",
        "hhomp", "mmseqs2", "msaprobs", "muscle", "pcoils", "phyml", "psiblast", "reformat", "repper", "seq2id", "tcoffee", "quick2d"]
      multi_seq: []
    }
    sequence_restrictions: {
      formats: ["CLUSTAL", "FASTA", "STOCKHOLM"]
      max_num_seq: 4000
      min_num_seq: 2
    }
  }

  mafft {
    name: "mafft"
    longname: "MAFFT"
    description: "Multiple sequence alignment tool"
    order: 3
    input_placeholder: "Enter up to 2000 protein/nucleotide sequences in FASTA format."
    code: "mfft"
    section: "Alignment"
    sample_input_key: "multiProtSeq"
    version: "7.273"
    memory: 64
    threads: 4
    hardruntime: 43200
    language: ""
    parameter: ["ALIGNMENT", "OUTPUT_ORDER", "MAFFT_GAP_OPEN", "OFFSET"]
    forwarding: {
      alignment: ["ali2d", "aln2plot", "alnviz", "ancescon", "clans", "clustalo", "deepcoil", "kalign", "hhblits", "hhfilter", "hhpred", "hhrepid", "hmmer", "mafft",
        "hhomp", "mmseqs2", "msaprobs", "muscle", "pcoils", "phyml", "psiblast", "reformat", "repper", "seq2id", "tcoffee", "quick2d"]
      multi_seq: []
    }
    sequence_restrictions: {
      formats: ["CLUSTAL", "FASTA", "STOCKHOLM"]
      max_num_seq: 2000
      min_num_seq: 2
    }
  }

  marcoil {
    name: "marcoil"
    longname: "MARCOIL"
    order: 3
    description: "Prediction of coiled coils based on HMMs"
    input_placeholder: "Enter a protein sequence in FASTA format."
    code: "marc"
    section: "SeqAnal"
    sample_input_key: "coiledcoilSeq"
    version: ""
    memory: 2
    threads: 1
    hardruntime: 1800
    language: ""
    parameter: ["ALIGNMENT", "MATRIX_MARCOIL", "TRANSITION_PROBABILITY"]
    forwarding: {
      alignment: []
      multi_seq: []
    }
    sequence_restrictions: {
      formats: ["FASTA"]
      max_num_seq: 1
    }
  }

  mmseqs2 {
    name: "mmseqs2"
    longname: "MMseqs2"
    order: 2
    description: "Ultra fast and sensitive protein sequence clustering"
    input_placeholder: "Enter up to 20000 protein sequences in FASTA format."
    code: "mseq"
    section: "Classification"
    sample_input_key: "multiProtSeq"
    version: "c552cce6c3194c06bc0bba84f04c4ef13d62f0a5"
    memory: 32
    threads: 4
    hardruntime: 14400
    language: "C++"
    parameter: ["ALIGNMENT", "MIN_SEQID", "MIN_ALN_COV", "CLUSTERING_MODE"]
    forwarding: {
      alignment: ["clans", "mmseqs2", "clustalo", "kalign", "mafft", "msaprobs", "muscle", "tcoffee"]
      multi_seq: []
    }
    sequence_restrictions: {
      max_char_per_seq: 30000
      max_num_seq: 20000
    }
  }

  msaprobs {
    name: "msaprobs"
    longname: "MSAProbs"
    order: 4
    description: "Multiple sequence alignment tool"
    input_placeholder: "Enter up to 2000 protein sequences in FASTA format."
    code: "mprb"
    section: "Alignment"
    sample_input_key: "multiProtSeq"
    version: "0.9.7"
    memory: 64
    threads: 8
    hardruntime: 43200
    parameter: ["ALIGNMENT", "OUTPUT_ORDER"]
    language: ""
    forwarding: {
      alignment: ["ali2d", "aln2plot", "alnviz", "ancescon", "clans", "clustalo", "deepcoil", "kalign", "hhblits", "hhfilter", "hhpred", "hhrepid", "hmmer", "mafft",
        "hhomp", "mmseqs2", "msaprobs", "muscle", "pcoils", "phyml", "psiblast", "reformat", "repper", "seq2id", "tcoffee", "quick2d"]
      multi_seq: []
    }
    sequence_restrictions: {
      formats: ["CLUSTAL", "FASTA", "STOCKHOLM"]
      max_num_seq: 2000
      min_num_seq: 2
    }
  }

  modeller {
    name: "modeller"
    longname: "MODELLER"
    order: 0
    description: "Comparative protein structure modelling by satisfaction of spatial restraints"
    input_placeholder: "Please note: MODELLER is configured to work with PIR alignments forwarded by HHpred. Run a HHpred search with your query, select the top-scoring templates and click on 'Create model using selection'. This will generate a PIR file that can be subsequently submitted to MODELLER. \n\nTo obtain a key for MODELLER go to: http://salilab.org/modeller/registration.shtml."
    code: "modl"
    section: "3ary"
    sample_input_key: "modellerPIR"
    version: "9.22"
    memory: 16
    threads: 1
    hardruntime: 3600
    language: ""
    parameter: ["ALIGNMENT", "REGKEY"]
    sequence_restrictions: {
      formats: ["PIR"]
      type: "PROTEIN"
    }
    forwarding: {
      alignment: []
      multi_seq: []
    }
    sequence_restrictions: {
      formats: ["PIR"]
    }
  }

  samcc {
    name: "samcc"
    longname: "SamCC"
    order: 1
    description: "Measures structural parameters of four-helical bundles"
    input_placeholder: "Enter PDB coordinates of a four-helical bundle."
    code: "samc"
    section: "3ary"
    sample_input_key: "pdbInput"
    version: ""
    memory: 6
    threads: 1
    hardruntime: 3600
    language: ""
    parameter: ["ALIGNMENT", "SAMCC_HELIXONE", "SAMCC_HELIXTWO", "SAMCC_HELIXTHREE", "SAMCC_HELIXFOUR", "SAMCC_PERIODICITY", "EFF_CRICK_ANGLE"]
    input_type: "PDB"
    forwarding: {
      alignment: []
      multi_seq: []
    }
    sequence_restrictions: {
    input_type: ['PDB']
    }
  }

  muscle {
    name: "muscle"
    longname: "MUSCLE"
    order: 5
    description: "Multiple sequence alignment tool"
    input_placeholder: "Enter up to 2000 protein/nucleotide sequences in FASTA format."
    code: "musc"
    section: "Alignment"
    sample_input_key: "multiProtSeq"
    version: "3.8.31"
    memory: 32
    threads: 1
    hardruntime: 36000
    language: ""
    parameter: ["ALIGNMENT", "MAXROUNDS"]
    forwarding: {
      alignment: ["ali2d", "aln2plot", "alnviz", "ancescon", "clans", "clustalo", "deepcoil", "kalign", "hhblits", "hhfilter", "hhpred", "hhrepid", "hmmer", "mafft",
        "hhomp", "mmseqs2", "msaprobs", "muscle", "pcoils", "phyml", "psiblast", "reformat", "repper", "seq2id", "tcoffee", "quick2d"]
      multi_seq: []
    }
    sequence_restrictions: {
      formats: ["CLUSTAL", "FASTA", "STOCKHOLM"]
      max_num_seq: 2000
      min_num_seq: 2
    }
  }

  patsearch {
    name: "patsearch"
    longname: "PatternSearch"
    order: 3
    description: "Search based on PROSITE pattern/regular expression"
    input_placeholder: "Enter a PROSITE grammar/regular expression."
    code: "pats"
    section: "Search"
    sample_input_key: "patternProt"
    version: ""
    memory: 16
    threads: 1
    hardruntime: 7200
    language: ""
    parameter: ["ALIGNMENT", "PATSEARCH_DB", "GRAMMAR", "SEQCOUNT"]
    input_type: "REGEX"
    forwarding: {
      alignment: ["clans", "mmseqs2"]
      multi_seq: []
    }
  }

  pcoils {
    name: "pcoils"
    longname: "PCOILS"
    order: 4
    description: "Prediction of coiled coils"
    input_placeholder: "Enter a protein sequence/multiple sequence alignment with up to 2000 sequences in FASTA/CLUSTAL format."
    code: "pcoi"
    section: "SeqAnal"
    sample_input_key: "coiledcoilSeq"
    version: ""
    memory: 64
    threads: 8
    hardruntime: 14400
    language: ""
    parameter: ["ALIGNMENT", "PCOILS_INPUT_MODE", "PCOILS_MATRIX", "PCOILS_WEIGHTING"]
    forwarding: {
      alignment: []
      multi_seq: []
    }
    sequence_restrictions: {
      formats: ["CLUSTAL", "FASTA", "STOCKHOLM"]
    }
  }

  psiblast {
    name: "psiblast"
    longname: "ProtBLAST/PSI-BLAST"
    order: 4
    description: "NCBI (PSI-)BLAST+"
    input_placeholder: "Enter a protein sequence/multiple sequence alignment in A3M/CLUSTAL/FASTA/STOCKHOLM format."
    code: "blst"
    section: "Search"
    sample_input_key: "singleProtSeq"
    version: "2.9.0+"
    memory: 128
    threads: 8
    hardruntime: 3600
    language: "C++"
    parameter: ["ALIGNMENT", "STANDARD_DB", "MATRIX", "MAXROUNDS", "EVALUE", "BLAST_INCL_EVAL", "DESC"]
    forwarding: {
      alignment: ["ali2d", "aln2plot", "alnviz", "ancescon", "clans", "clustalo", "deepcoil", "kalign", "hhblits", "hhfilter", "hhpred", "hhrepid", "hmmer",
        "hhomp", "mafft", "mmseqs2", "msaprobs", "muscle", "pcoils", "phyml", "psiblast", "reformat", "repper", "seq2id", "tcoffee", "quick2d"]
      multi_seq: ["clans", "mmseqs2", "seq2id"]
    }
    sequence_restrictions: {
      formats: ["CLUSTAL", "FASTA", "STOCKHOLM"]
      max_char_per_seq: 10000
      max_num_seq: 5000
      same_length: true
    }
  }

  phyml {
    name: "phyml"
    longname: "PhyML"
    order: 3
    description: "Infer phylogenies"
    input_placeholder: "Enter a protein multiple sequence alignment with up to 100 sequences in CLUSTAL/FASTA/STOCKHOLM format."
    section: "Classification"
    sample_input_key: "msaProtSeq"
    code: "phym"
    version: "2.5.0+"
    memory: 16
    threads: 1
    hardruntime: 43200
    language: "C++"
    parameter: ["ALIGNMENT", "MATRIX_PHYML", "NO_REPLICATES"]
    forwarding: {
      alignment: []
      multi_seq: []
    }
    sequence_restrictions: {
      formats: ["CLUSTAL", "FASTA", "STOCKHOLM"]
      min_num_seq: 1
      max_num_seq: 100
      same_length: true
    }
  }

  repper {
    name: "repper"
    longname: "REPPER"
    order: 5
    description: "Detects short gapless repeats"
    input_placeholder: "Enter a protein sequence/multiple sequence alignment with up to 2000 sequences in FASTA/CLUSTAL format."
    code: "repr"
    section: "SeqAnal"
    sample_input_key: "protyadA"
    version: ""
    memory: 64
    threads: 8
    hardruntime: 7200
    language: ""
    parameter: ["ALIGNMENT", "REPPER_INPUT_MODE", "WINDOW_SIZE", "PERIODICITY_MIN", "PERIODICITY_MAX", "FTWIN_THRESHOLD", "REPWIN_THRESHOLD"]
    forwarding: {
      alignment: []
      multi_seq: []
    }
    sequence_restrictions: {
      formats: ["CLUSTAL", "FASTA", "STOCKHOLM"]
      max_char_per_seq: 10000
      max_num_seq: 2000
      same_length: true
    }
  }

  retseq {
    name: "retseq"
    longname: "RetrieveSeq"
    order: 4
    description: "Sequence retrieval using a list of accession IDs"
    input_placeholder: "Enter a newline separated list of identifiers and choose the corresponding database."
    code: "rtsq"
    section: "Utils"
    sample_input_key: "protHeaders"
    version: ""
    memory: 128
    threads: 1
    hardruntime: 3600
    language: ""
    parameter: ["ALIGNMENT", "STANDARD_DB"]
    input_type: "ACCESSION_ID"
    forwarding: {
      alignment: ["clans", "mmseqs2"]
      multi_seq: []
    }
  }

  seq2id {
    name: "seq2id"
    longname: "Seq2ID"
    order: 5
    description: "Extraction of accessions IDs"
    input_placeholder: "Enter protein sequences in FASTA format."
    code: "s2id"
    section: "Utils"
    sample_input_key: "multiProtSeq"
    version: ""
    memory: 8
    threads: 1
    hardruntime: 1800
    language: ""
    parameter: ["ALIGNMENT"]
    forwarding: {
      alignment: ["retseq"]
      multi_seq: []
    }
  }

  tcoffee {
    name: "tcoffee"
    longname: "T-Coffee"
    order: 6
    description: "Multiple sequence alignment tool"
    input_placeholder: "Enter up to 1000 protein/nucleotide sequences in FASTA format."
    code: "tcff"
    section: "Alignment"
    sample_input_key: "msaProtSeq"
    version: "11.0"
    memory: 32
    threads: 4
    hardruntime: 3600
    language: "C"
    test: ""
    parameter: ["ALIGNMENT", "OUTPUT_ORDER"]
    forwarding: {
      alignment: ["ali2d", "aln2plot", "alnviz", "ancescon", "clans", "clustalo", "deepcoil", "kalign", "hhblits", "hhfilter", "hhpred", "hhrepid", "hmmer", "mafft",
        "hhomp", "mmseqs2", "msaprobs", "muscle", "pcoils", "phyml", "psiblast", "reformat", "repper", "seq2id", "tcoffee", "quick2d"]
      multi_seq: []
    }
    sequence_restrictions: {
      min_num_seq: 2,
    }
    sequence_restrictions: {
      formats: ["CLUSTAL", "FASTA", "STOCKHOLM"]
      max_num_seq: 1000
      min_num_seq: 2
    }
  }

  tprpred {
    name: "tprpred"
    longname: "TPRpred"
    order: 6
    description: "Detects Tetratrico Peptide Repeats (TPRs), Pentatrico Peptide Repeats (PPRs) and SEL1-like repeats"
    code: "tprp"
    section: "SeqAnal"
    sample_input_key: "tprSeq"
    version: "11.0"
    memory: 2
    input_placeholder: "Enter a protein sequence in FASTA format."
    threads: 1
    hardruntime: 1800
    language: "C++, Perl"
    test: ""
    parameter: ["ALIGNMENT", "EVAL_TPR"]
    forwarding: {
      alignment: []
      multi_seq: []
    }
    sequence_restrictions: {
      max_num_seq: 1,
    }
    sequence_restrictions: {
      max_num_seq: 1
    }
  }

  quick2d {
    name: "quick2d"
    longname: "Quick2D"
    order: 2
    description: "Overview of secondary structure features like coiled coils, transmembrane helices and disordered regions"
    code: "qk2d"
    section: "2ary"
    sample_input_key: "singleProtSeq"
    memory: 64
    threads: 8
    hardruntime: 21600
    version: ""
    input_placeholder: "Enter a protein sequence in FASTA format."
    parameter: ["ALIGNMENT", "TARGET_PSI_DB", "QUICK_ITERS", "EVALUE"]
    forwarding: {
      alignment: []
      multi_seq: []
    }
    sequence_restrictions: {
      max_num_seq: 1
    }
  }
}
