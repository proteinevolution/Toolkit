# Routes
# This file defines all application routes (Higher priority routes first)


# IMPORTANT: Comments appended to a valid line are not permitted\
# IMPORTANT: Controllers are now injected, do not forget the '@' prefix
# ~~~~

############################################################################
# Toolkit related routes
############################################################################

# Index Page requested by user. Note that the controller is injected
GET           /                                       @controllers.Application.index

# Dashboard for Admin
#GET         /login                                         @controllers.Auth.login
#GET         /logout                                        @controllers.Auth.logout()
#GET         /@/backend                                  `   @controllers.Auth.backend
#POST        /login                                         @controllers.Auth.backendLogin()
POST          /settings/clustermode                   @controllers.Settings.setClusterMode(clusterMode : String)
POST          /settings/memset                        @controllers.Settings.setMemoryAllocation(memory: Int, toolName: String)

GET           /@/backend                              @controllers.Backend.index
GET           /@/backend/settings                     @controllers.Backend.settings
GET           /@/backend/edit                         @controllers.Backend.edit
GET           /@/backend/access                       @controllers.Backend.access
GET           /@/backend/logout                       @controllers.Backend.logOut


# Websocket
GET           /ws                                     @controllers.Application.ws


# Serve files
GET           /files/:mainID/:filename                @controllers.Application.file(filename: String, mainID: String)



# Assets
GET           /webjars/*file                          controllers.WebJarAssets.at(file)
#GET           /assets/*file                           controllers.Assets.at(path="/public", file)
GET           /assets/*file                           controllers.Assets.versioned(path="/public", file: Asset)


# Route for direct get requests
GET           /tools/:toolname                        @controllers.Application.showTool(toolname : String)
# Redirects to a job with the jobID // mainID
GET           /jobs/:idString                         @controllers.Application.showJob(idString: String)

# File Uploader

POST          /upload                                 @controllers.Application.upload()


# Contact

# Routes for Auth Service
GET           /signin                                 @controllers.Auth.signIn(name_login : String = "")
GET           /signin/:name_login                     @controllers.Auth.signIn(name_login : String)
POST          /signin/submit/                         @controllers.Auth.signInSubmit()
GET           /signup                                 @controllers.Auth.signUp()
POST          /signup/submit/                         @controllers.Auth.signUpSubmit()
GET           /signout                                @controllers.Auth.signOut()
GET           /miniprofile                            @controllers.Auth.miniProfile()
GET           /profile                                @controllers.Auth.profile()
POST          /profile/submit/userData/               @controllers.Auth.profileSubmit()
POST          /profile/submit/password/               @controllers.Auth.profileSubmit()
GET           /verification/:name_login/:token        @controllers.Auth.verification(name_login : String, token : String)


# Find a Job
GET           /jobs/find/:queryString                 @controllers.Search.getJob(queryString : String)
# Update Job status
POST          /jobs/done/:jobID                       @controllers.Jobs.jobStatusDone(jobID : String)
POST          /jobs/error/:jobID                      @controllers.Jobs.jobStatusError(jobID : String)
POST          /jobs/running/:jobID                    @controllers.Jobs.jobStatusRunning(jobID : String)
POST          /jobs/queued/:jobID                     @controllers.Jobs.jobStatusQueued(jobID : String)
POST          /jobs/sge/:jobID/:sgeID                 @controllers.Jobs.SGEID(jobID: String, sgeID: String)
POST          /jobs/message/:mainID                   @controllers.Jobs.pushMessage(mainID, message: String)
POST          /jobs/dateviewed/:mainID                @controllers.Jobs.updateDateViewed(mainID)
# Static route
GET           /static/get/:static                     @controllers.Service.static(static : String)

# ElasticSearch

#GET     /search/jobs/:id                                   @controllers.Search.getJob(id: String)
#GET     /search:q                                          @controllers.Search.searchJob(q: String)
GET           /search/checkJobID/:jobID               @controllers.Search.checkJobID(jobID : String)
#GET           /suggest/:jobID                         @controllers.Search.ac(jobID: String)
GET           /suggest/:jobID                         @controllers.Search.autoComplete(jobID: String)



# Sitemap
# Routes for static assets
GET           /:static                                @controllers.Application.static(static : String)


# GetTool
GET           /api/tools/:toolname                    @controllers.Service.getTool(toolname)


# Get list of userjobs
GET           /api/jobs                                @controllers.JobController.listJobs
POST          /api/job                                @controllers.JobController.create(toolname: String, jobID: String)
POST          /api/job/check                          @controllers.JobController.check(toolname: String, jobID: Option[String])
GET           /api/job/:jobID                         @controllers.Service.getJob(jobID)
DELETE        /api/job/:jobID                         @controllers.JobController.delete(jobID)
GET           /api/job/load/:jobID                    @controllers.JobController.loadJob(jobID: String)


# Frontend Stuff
POST          /api/frontendSubmit/:toolname          @controllers.Tool.frontendCount(toolname: String)

# Job Annotations

POST          /api/job/addnotes/:jobID/:content      @controllers.Jobs.annotation(jobID: String, content : String)