# Routes
# This file defines all application routes (Higher priority routes first)


# IMPORTANT: Comments appended to a valid line are not permitted\
# IMPORTANT: Controllers are now injected, do not forget the '@' prefix
# ~~~~

############################################################################
# Toolkit related routes
############################################################################

# Index Page requested by user. Note that the controller is injected
GET         /                                              @controllers.Application.index

# Dashboard for Admin
#GET         /login                                         @controllers.Auth.login
#GET         /logout                                        @controllers.Auth.logout()
#GET         /@/backend                                     @controllers.Auth.backend
#POST        /login                                         @controllers.Auth.backendLogin()
POST        /settings/clustermode                          @controllers.Settings.setClusterMode(clusterMode : String)
POST        /settings/memset                               @controllers.Settings.setMemoryAllocation(memory: Int, toolName: String)

GET         /@/backend                                     @controllers.Backend.index
GET         /@/backend/settings                            @controllers.Backend.settings
GET         /@/backend/edit                                @controllers.Backend.edit
GET         /@/backend/access                              @controllers.Backend.access
GET         /@/backend/logout                              @controllers.Backend.logOut


# Websocket
GET         /ws                                            @controllers.Application.ws


# Serve files
GET         /files/:mainID/:filename                       @controllers.Application.file(filename: String, mainID: String)



# Assets
GET         /webjars/*file                                 controllers.WebJarAssets.at(file)
GET         /assets/*file                                  controllers.Assets.at(path="/public", file)


# Route for direct get requests
GET         /tools/:toolname                               @controllers.Application.showTool(toolname : String)
GET         /jobs/:mainID                                  @controllers.Application.showJob(mainID: String)

# File Uploader

POST       /upload                                         @controllers.Application.upload()


# Contact

# Routes for Auth Service
GET         /signin                                        @controllers.Auth.signIn(name_login : String = "")
GET         /signin/:name_login                            @controllers.Auth.signIn(name_login : String)
POST        /signin/submit/                                @controllers.Auth.signInSubmit()
GET         /signup                                        @controllers.Auth.signUp()
POST        /signup/submit/                                @controllers.Auth.signUpSubmit()
GET         /signout                                       @controllers.Auth.signOut()
GET         /miniprofile                                   @controllers.Auth.miniProfile()
GET         /profile                                       @controllers.Auth.profile()
POST        /profile/submit/userData/                      @controllers.Auth.profileSubmit()
POST        /profile/submit/password/                      @controllers.Auth.profileSubmit()
GET         /verification/:name_login/:token               @controllers.Auth.verification(name_login : String, token : String)


# Interaction with Jobs
# Loading a Job from the DB
GET         /jobs/add/:mainID                              @controllers.Service.addJob(mainID: String)
# Get a Job the User Actor already has loaded
# Delete a Job
DELETE      /jobs/:mainID                                  @controllers.Service.forceDeleteJob(mainID : String)
# Clear or delete multiple jobs
DELETE      /jobs                                          @controllers.Service.removeJobs()
# Find a Job
GET         /jobs/find/:queryString                        @controllers.Search.getJob(queryString : String)
# Update Job status
POST        /jobs/done/:jobID                              @controllers.Jobs.jobStatusDone(jobID : String)
POST        /jobs/error/:jobID                             @controllers.Jobs.jobStatusError(jobID : String)
POST        /jobs/running/:jobID                           @controllers.Jobs.jobStatusRunning(jobID : String)
POST        /jobs/queued/:jobID                            @controllers.Jobs.jobStatusQueued(jobID : String)

# Static route
GET         /static/get/:static                            @controllers.Service.static(static : String)




# ElasticSearch

#GET     /search/jobs/:id                                   @controllers.Search.getJob(id: String)
#GET     /search:q                                          @controllers.Search.searchJob(q: String)




# Add a Child Job
#POST        /jobs/addChild                  @controllers.Service.addChild

# Sitemap
# Routes for static assets
GET         /:static                                       @controllers.Application.static(static : String)

#Forwarding
#GET         /forward/:toolname                             @controllers.Forwarding.forward(toolname: String, output: String)


# Some experimental things
# Get ToolInformation as JSON based on toolname
GET         /api/tools/:toolname                           @controllers.Service.getTool(toolname)
# Submit new Job
POST        /api/submit                                    @controllers.Tool.submit(toolname : String, start : Boolean, jobID : Option[String])
# Get JobInformation based on Toolname
GET         /api/jobs/:mainid                              @controllers.Service.getJob(mainid)

# Get list of userjobs
GET         /api/jobs                                      @controllers.Service.listJobs