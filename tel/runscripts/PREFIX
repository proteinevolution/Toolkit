#!/bin/bash

#unset proxy variable
export http_proxy=
key=$(<../key)
REPEATED=""

trap 'sig_handler ERR' ERR

# handles signals caused by -l s_vmem
trap 'sig_handler XCPU' SIGXCPU

# handles signals caused by -l s_rt
trap 'sig_handler USR1' SIGUSR1

# handles signals caused by -notify and hard limits
trap 'sig_handler USR1' SIGUSR2

#HANDLE errors related to SGE
function sig_handler () {

    if [ -e ../results/process.log ]
    then
        STATUS=$(tail -n 1 ../results/process.log | cut -c 1)

        if [ ${STATUS} = "#" ] ; then
            echo "error" >> ../results/process.log
        fi
    fi

    until $(curl -X PUT --output /dev/null --silent --head --fail http://%HOSTNAME:%PORT/jobs/error/%jobid.content/$key); do
    printf 'host unreachable\n...waiting to set job status to error\n'
    sleep 5
    done

    case "$1" in
        USR1) echo "#Execution time limit reached! Terminating job!" >> ../results/process.log
            ;;
        USR2) echo "#Reached a resource limit! Terminating job!" >> ../results/process.log
            ;;
        XCPU) echo "#Execution memory limit reached! Terminating job!" >> ../results/process.log
            ;;
        SIGTERM) echo "#Terminating job!" >> ../results/process.log
            ;;
        ERR) echo "#Terminating job because of errors!" >> ../results/process.log
            ;;
    esac
    echo "error" >> ../results/process.log
    exit 0
}

until $(curl -X PUT --output /dev/null --silent --head --fail http://%HOSTNAME:%PORT/jobs/running/%jobid.content/$key); do
    printf 'host unreachable\n...waiting to set job status to running\n'
    sleep 5
done


# Recreate results and log directories
rm -rf ../results
rm -rf ../logs

mkdir ../results
mkdir ../logs

# Set environment
source %ENVIRONMENT


if [ -f ../params/alignment ]; then
    FORMAT=$(head -1 ../params/alignment | egrep "^CLUSTAL" | wc -l)
    if [ ${FORMAT} = "0" ] ; then
        #remove empty lines
        sed -i '/^\s*$/d' ../params/alignment
    fi
fi

JOBID=%jobid.content
