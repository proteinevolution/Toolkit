# TODO: parse SEQNAME and KNOWNS in a proper way
# NGL: http://arose.github.io/ngl/api/Stage.html#event:fullscreenChanged

echo "#Executing MODELLER." >> ../results/process.log

#convert alignment file to PIR, if it is not already PIR

if grep -E '^sequence' %alignment.path
then 
    cp %alignment.path alignment.pir
else
    pir_converter.pl -i %alignment.path -o alignment.pir -fas -tmp .
fi

OFFSET=$(sed -n 3p alignment.pir | grep -Eo '^(-){1,}' | wc -c)
if [[ ${OFFSET} = "0" ]] ; then
    OFFSET=1
fi

#extract templates and sequence
KNOWNS=$(grep 'structure' < alignment.pir | cut -d':' -f 2 | sed "s/\(.*\)/'\1'/"  | paste -sd',' -)
SEQNAME=$(grep 'sequence' < alignment.pir | cut -d':' -f 2)
FILENAME=%jobid.content
# replace filename with jobID
sed -i -- "s/${SEQNAME}/${FILENAME}/g" alignment.pir
# create python file
touch modeller.py
echo "# Homology modeling by the automodel class" >> modeller.py
echo "from modeller import *               # Load standard Modeller classes" >> modeller.py
echo "from modeller.automodel import *     # Load the automodel class" >> modeller.py
echo "log.verbose()" >> modeller.py

echo "class MyModel(automodel):" >> modeller.py
echo "      def special_patches(self, aln):" >> modeller.py
echo "          # Rename both chains and renumber the residues in each" >> modeller.py
echo "          self.rename_segments(segment_ids=('X')," >> modeller.py
echo "                          renumber_residues=(${OFFSET}))" >> modeller.py

echo "env = environ()                      # create a new MODELLER environment to build this model" >> modeller.py
echo "# directories for input atom files" >> modeller.py

# If we have a parentID, append the cif files generated by the parent
PARENTID=%parent_id.content
if [[ "${PARENTID}" ]]; then
    echo "env.io.atom_files_directory = ['$(readlink -f ../../${PARENTID}/results/cif)', '%CIFALL']" >> modeller.py 
else
    echo "env.io.atom_files_directory = '%CIFALL'" >> modeller.py
fi
echo "a = MyModel(env," >> modeller.py
echo "             alnfile  = 'alignment.pir',    # alignment filename" >> modeller.py
echo "             knowns   = (${KNOWNS}),     #codes of the templates" >> modeller.py
echo "             sequence = '${FILENAME}') #code of the target" >> modeller.py
echo "a.starting_model= 1                       # index of the first model" >> modeller.py
echo "a.ending_model = 1                        # index of the last model" >> modeller.py
echo "a.make()                                  # do the actual homology modeling" >> modeller.py
#remove ^M
tr -d $'\r' < modeller.py >> modeller_script.py
mv modeller.py modeller_script.py
chmod 0777 modeller_script.py
chmod 0777 alignment.pir
# run modeller
mod modeller_script.py >> modeller.log

mv `echo *[0-9].pdb` ${FILENAME}.pdb
mv modeller.log ../logs/
echo "done" >> ../results/process.log

echo "#Running quality checks on the model." >> ../results/process.log

echo "done" >> ../results/process.log

mv ${FILENAME}* ../results/
cd ../results
