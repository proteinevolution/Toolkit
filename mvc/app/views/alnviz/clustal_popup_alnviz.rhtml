
<body onkeydown="return (event.keyCode == 154)">


<style>

.biojs_msa_labels
{
    font-family: Droid Sans Mono;
    font-size: 10px;
}

html {
  overflow-x: auto;
  overflow-y: auto;
}


</style>

<script>

        // this is a way how you use a bundled file parser
        msa = require("msa");

        var opts = {colorscheme: {"scheme": "clustal"}};

        // set your custom properties
        // @see: https://github.com/greenify/biojs-vis-msa/tree/master/src/g 
        opts.el = document.getElementById("yourDiv");
        opts.vis = {
            conserv: false,
            overviewbox: false,
            seqlogo: false,

            labels: true,
            labelName: true,
            labelId: false,
            labelPartition: false,
            labelCheckbox: false
        };
        opts.conf = {
            dropImport: true
        };
        opts.zoomer = {
           alignmentHeight: "825", alignmentWidth: "auto", labelNameLength: 150, labelWidth: 130,labelFontsize: "10px",labelIdLength: 80,   menuFontsize: "12px",menuMarginLeft: "2px", menuPadding: "0px 15px 0px 15px", menuItemFontsize: "14px", menuItemLineHeight: "14px", autoResize: true
        };

        // init msa
        var m = new msa.msa(opts);

        // search in URL for fasta or clustal
        function getURLParameter(name) {
            return decodeURIComponent((new RegExp('[?|&]' + name + '=' + '([^&;]+?)(&|#|;|$)').exec(location.search) || [, ""])[1].replace(/\+/g, '%20')) || null;
        }

        var defaultURL = opener.popupTransfer()+".out";
        var url = getURLParameter('seq') || defaultURL;

        m.u.file.importURL(url, renderMSA);

        function renderMSA() {

            // the menu is independent to the MSA container
            var menuOpts = {};
            menuOpts.el = document.getElementById('div');
            menuOpts.msa = m;
            var defMenu = new msa.menu.defaultmenu(menuOpts);
            m.addView("menu", defMenu);

            // Author: Seung-Zin Nam
            // bugfix: here we shift the sequence ids back to their correct value via the backbone.js api !!!

            //for (var i=0; i<m.seqs.length; i++) {
            //var sequenceId = m.seqs.at(i).get("id");  
            //m.seqs.at(i).set("id", sequenceId-1);
            //}

            // call render at the end to display the whole MSA
            m.render();
        }
    </script>
    </body>
 
